#!/bin/bash
#
# Aipo is a groupware program developed by Aimluck,Inc.
# Copyright (C) 2004-2015 Aimluck,Inc.
# http://www.aipo.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#


TMP_DIR=/tmp/.aipo.update
ESC="\e["
ESCEND=m
COLOR_OFF=${ESC}${ESCEND}

echoInfo() {
	echo -en "${ESC}32${ESCEND}"
	echo "${1}" 
	echo -en "${COLOR_OFF}"
}

echoError() {
	echo ""
	echo -en "${ESC}31${ESCEND}"
	echo "Aipo ${AIPO_VERSION} のアップデートに失敗しました。"
	echo "${1}"
	echo -en "${COLOR_OFF}"
	if [ "$UPDATE_START" != "" ]; then
		(cd $AIPO_HOME/bin; sh shutdown.sh)
		if [ -d ${AIPO_HOME}.backup${TIME} ]; then
			mv ${AIPO_HOME} ${AIPO_HOME}.fail${TIME}
			mv ${AIPO_HOME}.backup${TIME} ${AIPO_HOME}
		fi
		(cd $AIPO_HOME/bin; sh shutdown.sh)
	fi
}

portListenWait() {
	count=0
	while [ $count -lt 100 ]; do
        	tmp_str=`lsof -i:${1}`
        	if [ "$tmp_str" != "" ]; then
                	return 0
        	fi
        	count=`expr $count + 1`
		sleep 1
	done
	return 1
}

startOldPostgres() {
	(cd $TMP_DIR; sudo -u ${OLD_POSTGRES_USER} ${AIPO_HOME}/postgres/bin/postmaster -D ${AIPO_HOME}/postgres/data -i > ${TMP_DIR}/startup.log 2>&1 &)
}

startPostgres() {
	(cd $TMP_DIR; sudo -u ${POSTGRES_USER} ${POSTGRES_HOME}/bin/postmaster -D ${POSTGRES_HOME}/data -i > ${TMP_DIR}/startup.log 2>&1 &)
}

stopPostgres() {
	(cd $AIPO_HOME/bin; sh shutdown.sh)
}

databaseBackup() {
	cd $TMP_DIR
	rm -rf "/tmp/.s.PGSQL.$OLD_POSTGRES_PORT.lock"
	rm -rf "/tmp/.s.PGSQL.$OLD_POSTGRES_PORT"

	startOldPostgres
	portListenWait ${OLD_POSTGRES_PORT}
        sudo -u ${OLD_POSTGRES_USER} ${AIPO_HOME}/postgres/bin/pg_dump -c -b -o -Fc -U ${OLD_POSTGRES_USER} -p ${OLD_POSTGRES_PORT} -f ${TMP_DIR}/backup.dump org001 > ${TMP_DIR}/backup.log 2>&1 || { echoError "データベースのダンプ中にエラーが発生しました。"; exit 1; }
	cd -
	stopPostgres
}


databaseRestore() {
	cd $TMP_DIR
	rm -rf "/tmp/.s.PGSQL.$POSTGRES_PORT.lock"
	rm -rf "/tmp/.s.PGSQL.$POSTGRES_PORT"
	startPostgres
	portListenWait ${POSTGRES_PORT}
	sudo -u ${POSTGRES_USER} ${POSTGRES_HOME}/bin/pg_restore -Fc -U ${POSTGRES_USER} -p ${POSTGRES_PORT} ${TMP_DIR}/backup.dump -d org001 > ${TMP_DIR}/restore.log 2>&1 || { echoError "データベースリストア中にエラーが発生しました。"; exit 1; }
	cd -
	stopPostgres
}

applySQL() {
	cp -rf ../dist/sql/$1.sql $TMP_DIR/$1.sql
	cd $TMP_DIR
	sudo -u ${POSTGRES_USER} $POSTGRES_HOME/bin/psql -U ${POSTGRES_USER} -d org001 -p $POSTGRES_PORT -f $TMP_DIR/$1.sql || { echoError "データベースマイグレーション中にエラーが発生しました。"; exit 1; }
	cd -
}
